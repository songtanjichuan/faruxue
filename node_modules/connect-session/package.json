{
  "name": "connect-session",
  "version": "0.0.1",
  "description": "Make connect session more convinient for REST API",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/btd/connect-session.git"
  },
  "keywords": [
    "connect",
    "session",
    "cookie",
    "header",
    "cors"
  ],
  "author": {
    "name": "Denis Bardadym",
    "email": "bardadymchik@gmail.com"
  },
  "license": "MIT",
  "devDependencies": {
    "mocha": "~1.7.4",
    "should": "~1.2.1",
    "supertest": "~0.5.1"
  },
  "dependencies": {
    "connect": "~2.7.1",
    "pause": "0.0.1",
    "debug": "~0.7.0"
  },
  "readme": "# connect-session\n\nIt is a small project which help organize optional sessions in REST applications that uses connect/express. By default\n connect has only cookie session, that is not applicable and very unconvinient for API projects.\n\n## Usage\n\nGenerally it based on connect session.js code, so configuration and options almost the same.\n\nFor example you have a route that handle session management:\n\nFirst i expect you will made some configuration and create middleware function:\n\n```javascript\n//you config-session.js file\nvar connectSession = require('connect-session'),\n    session = connectSession.session,\n    header = connectSession.header;\n\n\nvar util = require('../lib/utils');\n\n//you should replace this one with other store (but this used by default)\nvar MemoryStore = require('../lib/session/memory');\n\nvar loaders = [\n    header({\n        header: 'X-User-Session' //this used by default, so you can skip this\n    })\n];\n\nvar options = {\n    store: new MemoryStore\n}\n\nmodule.exports.sessionCreate = session(loaders, options);\n\nmodule.exports.sessionLoad = session(loaders, util.merge(options, {\n    generateOnMissingSID: false\n}));\n```\n\n```javascript\n\nvar sessionCreate = require('./config-session').sessionCreate;\n\napp.get('/sessions/new', sessionCreate, function(req, res) {\n    res.json({ sid: req.sessionID});\n})\n```\n\nThis route will return newly created session and initialize session. You should understand that session will be available\n<b>only in this route</b>. What happen there:\n\nFirst request will be processed by session middleware (by default it uses `MemoryStore` to store sessions) it will use\nheader loader to try to find session id in default header `'X-User-Session'` (to change this pass in header options { header: 'My-header'}).\nIf session id will not be founded new session will be created and its sid will be returned.\n\nOf course you expect that session will be loaded every time it can be loaded, to make this need to add in app general middleware:\n\n```javascript\nvar sessionLoad = require('./config-session').sessionLoad;\n\n//do not forget add all needed middleware before!!!\napp.use(sessionLoad);\n```",
  "readmeFilename": "README.md",
  "_id": "connect-session@0.0.1",
  "dist": {
    "shasum": "77f2154f148f488e66d125665ba19a7261c78f67",
    "tarball": "http://registry.npmjs.org/connect-session/-/connect-session-0.0.1.tgz"
  },
  "_npmVersion": "1.1.69",
  "_npmUser": {
    "name": "btd",
    "email": "bardadymchik@gmail.com"
  },
  "maintainers": [
    {
      "name": "btd",
      "email": "bardadymchik@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "77f2154f148f488e66d125665ba19a7261c78f67",
  "_resolved": "https://registry.npmjs.org/connect-session/-/connect-session-0.0.1.tgz",
  "_from": "connect-session@*"
}
